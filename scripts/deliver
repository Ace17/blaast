#!/bin/bash
set -euo pipefail

readonly scriptDir=$(dirname $0)

readonly tmpDir=/tmp/deliver-$$
trap "rm -rf $tmpDir" EXIT
mkdir -p $tmpDir

NAME=Blaast

function main
{
  echo "Delivering [$NAME]"
  deliverBinaryVersion
}

function deliverBinaryVersion
{
  local N=$NAME

  mkdir $tmpDir/$N

  echo "-------------------------------------"
  echo "Building binaries"

  # Windows binaries
  BIN_WIN=$tmpDir/bin/w64
  BIN=$BIN_WIN \
    ./scripts/w64-make -j`nproc` $BIN_WIN/client.exe >/dev/null

  gccVersion=$(x86_64-w64-mingw32-g++ -dumpversion)

  cp $tmpDir/bin/w64/client.exe                                      $tmpDir/$N
  cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll                 $tmpDir/$N
  cp /usr/lib/gcc/x86_64-w64-mingw32/$gccVersion/libstdc++-6.dll     $tmpDir/$N
  cp /usr/lib/gcc/x86_64-w64-mingw32/$gccVersion/libgcc_s_seh-1.dll  $tmpDir/$N
  cp /opt/envs/win64/bin/SDL2.dll                                    $tmpDir/$N

  # GNU/Linux binaries
  CXXFLAGS="-include extra/glibc_version.h" \
  BIN=$tmpDir/bin/gnu \
    make -j`nproc` >/dev/null

  cp -a $tmpDir/bin/gnu/client.exe                                $tmpDir/$N/client.x86_64

  # Strip executables
  strip -s $tmpDir/$N/*.{exe,dll,x86_64}

  # Compress executables
  upx $tmpDir/$N/*.{exe,dll,x86_64}

  # Copy data
  cp -a data $tmpDir/$N/data

  mkdir -p                 $tmpDir/$N/iso/data/ani
  cp -a iso/data/ani/*.ani $tmpDir/$N/iso/data/ani

  mkdir -p                      $tmpDir/$N/iso/data/res
  cp -a iso/data/res/field1.pcx $tmpDir/$N/iso/data/res

  (
    cd $tmpDir
    zip -q $N.zip -r $N
  )

  cp $tmpDir/$N.zip /tmp/
  du -hs /tmp/$N.zip
}

main
